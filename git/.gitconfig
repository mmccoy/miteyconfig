[core]
    editor = vim
    pager=less -x4

[include]
    path = ~/.git_id

[color]
    branch = auto
    diff = auto
    status = auto

[color "branch"]
    current = red reverse
    local = blue
    remote = green

[color "diff"]
    meta = yellow
    frag = magenta
    old = red bold
    new = green
    plain = white

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[push]
    default = current
[pull]
    default = current
[diff]
    mnemonicprefix = true
[branch]
    autosetuprebase = always
[apply]
    whitespace = nowarn

[alias]
    s = status
    cl = clone
    ci = commit
    co = checkout
    br = branch
    r = reset
    gr = grep -Ii
    diff = diff --word-diff
    branch = branch -ra
    grep = grep -Ii
    bra = branch -ra
    ai = add --interactive
    f = "!git ls-files | grep -i"
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD
    ls = log --pretty=format:"%C(green)%h\\ %C(yellow)[%ad]%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    fl = log -u
    filelog = log -u
    d = diff --word-diff
    dc = diff --cached
    dlc = diff --cached HEAD^
    dr  = "!f() { git diff -w "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard
    sl = stash list
    sa = stash apply
    ss = stash save
    sso = credential-corpsso login
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0
    unstage = reset -q HEAD --
    discard = checkout --
    nevermind = !git reset --hard HEAD && git clean -d -f
    uncommit = reset --mixed HEAD~
    save = commit -m
    resave = commit --amend
    invert = revert
    last = log -1 HEAD --format=format:"%Cred%H"
    summary = status -u -s
    graph = log --graph -10 --branches --remotes --tags  --format=format:'%Cgreen%h %Creset• %<(75,trunc)%s (%cN, %ar) %Cred%d' --date-order
    history = log -10 --format=format:'%Cgreen%h %Creset• %s (%cN, %ar)'
    branchout = checkout -b
    tags = tag
    branches = branch -a
    stashes = stash list
    remotes = remote -v
    prestage = diff -w --word-diff=color
    precommit = diff --cached -w --word-diff=color --word-diff-regex='[^[:space:]<>]+'
    move = mv
    remove = rm
    unstash = stash pop
    what = show -w
    untrack = rm -r --cached
    rewrite = rebase -i
    amend = commit --amend
    back = checkout "-"
    contributors = shortlog -s -n
    filetrail = git log --follow -p -w
    mergetrail = log --ancestry-path --merges
    unmerged = diff --name-only --diff-filter=U

    # conflict/merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #open markdown files edited in last commit
    last = "!gvim $(git show HEAD --format="" --name-only | grep -e .*md$ | xargs)"

    # initial empty commit
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

    # list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
    ra = "!f() { git remote add $1 https://bitbucket.org/$2.git; }; f"
    wl = worktree list

[rerere]
  enabled = false
[rebase]
  autosquash = true
[url "sso://user/mmccoy/"]
  insteadof = me:

[merge]
  tool = sublimerge

[mergetool "sublimerge"]
  cmd = subl -n --wait \"$REMOTE\" \"$BASE\" \"$LOCAL\" \"$MERGED\" --command \"sublimerge_diff_views\"
  trustExitCode = false

[diff]
  tool = sublimerge

[difftool "sublimerge"]
  cmd = subl -n --wait \"$REMOTE\" \"$LOCAL\" --command \"sublimerge_diff_views {\\\"left_read_only\\\": true, \\\"right_read_only\\\": true}\"
